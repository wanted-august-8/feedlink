name: feedlink CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
      mysql:
        image: mysql:8.0
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.FEEDLINK_DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.FEEDLINK_DB_SCHEMA }}
          MYSQL_USER: ${{ secrets.FEEDLINK_DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.FEEDLINK_DB_PASSWORD }}
        ports:
          - 3306:3306
          
      redis:
        image: redis:7.0
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 6379:6379
          
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
          
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
                ${{ runner.os }}-gradle-
    
    - name: Gradle 권한 부여
      run: chmod +x gradlew
    
    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: DockerHub 로그인
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker, 이미지 생성
      run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/prod_server .
    - name: Push Docker
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/prod_server:latest
      
  deploy:
      if: github.event_name == 'push'
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Set target IP
          run: |
            STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}/env")
            echo $STATUS
            if [ $STATUS = 200 ]; then
              CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/env")
            else
              CURRENT_UPSTREAM=green
            fi
            echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
            if [ $CURRENT_UPSTREAM = blue ]; then
              echo "CURRENT_PORT=8080" >> $GITHUB_ENV
              echo "STOPPED_PORT=8081" >> $GITHUB_ENV
              echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
            elif [ $CURRENT_UPSTREAM = green ]; then
              echo "CURRENT_PORT=8081" >> $GITHUB_ENV
              echo "STOPPED_PORT=8080" >> $GITHUB_ENV
              echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
            else
              echo "error"
              exit 1
            fi
            
        - name: Docker compose
          uses: appleboy/ssh-action@master
          with:
            username: ubuntu
            host: ${{ secrets.LIVE_SERVER_IP }}
            key: ${{ secrets.EC2_SSH_KEY }}
            script_stop: true
            script: |
              sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/prod_server:latest
              sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d
        
        - name: Check deploy server URL
          uses: jtalk/url-health-check-action@v3
          with:
            url: http://${{ secrets.LIVE_SERVER_IP }}:${{env.STOPPED_PORT}}/env
            max-attempts: 3
            retry-delay: 10s
  
        - name: Change nginx upstream
          uses: appleboy/ssh-action@master
          with:
            username: ubuntu
            host: ${{ secrets.LIVE_SERVER_IP }}
            key: ${{ secrets.EC2_SSH_KEY }}
            script_stop: true
            script: |
              sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 
  
        - name: Stop current server
          uses: appleboy/ssh-action@master
          with:
            username: ubuntu
            host: ${{ secrets.LIVE_SERVER_IP }}
            key: ${{ secrets.EC2_SSH_KEY }}
            script_stop: true
            script: |
              sudo docker stop ${{env.CURRENT_UPSTREAM}}
              sudo docker rm ${{env.CURRENT_UPSTREAM}}
